<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>https://moribellamy.github.io</link>
    <atom:link href="https://moribellamy.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>A modern (circa 2019) cross platform browser extension.</title>
        <description>
          
          In mid 2019 I got the urge to work on a browser extension. It was pretty fun! Background Toolchain NodeJS / NPM / Webpack VSCode / Typescript Web Extension Testing Packaging Background Everyone has different workflows when it comes to their browser tabs. Some people open so many that you...
        </description>
        <pubDate>Wed, 01 Apr 2020 00:00:00 -0500</pubDate>
        <link>https://moribellamy.github.io/2020-04-01-modern-brower-extension/</link>
        <guid isPermaLink="true">https://moribellamy.github.io/2020-04-01-modern-brower-extension/</guid>
      </item>
    
      <item>
        <title>Empty Q() objects in Django</title>
        <description>
          
          As Django developers know, the ORM uses python **kwargs to specify filtering criterion. From their own documentation, we have the example: from django.db.models import Q Q(question__startswith=&apos;What&apos;) Q(question__startswith=&apos;Who&apos;) | Q(question__startswith=&apos;What&apos;) So, for example, these would be passed to an ORM method so it knows which SQL to generate: results = Poll.objects.get(...
        </description>
        <pubDate>Fri, 19 Jul 2019 00:00:00 -0500</pubDate>
        <link>https://moribellamy.github.io/2019-07-19-django-empty-q/</link>
        <guid isPermaLink="true">https://moribellamy.github.io/2019-07-19-django-empty-q/</guid>
      </item>
    
      <item>
        <title>Porygon</title>
        <description>
          
          Porygon is a circuit built with commodity hardware designed to automate actions on a Nintendo Switch Joycon. For discussion or questions, use the issues page on the companion GitHub repo. Background Acknowledgements Implementation The joycon The circuit The RasPi The camera Pulling it all together Background As you can see...
        </description>
        <pubDate>Tue, 26 Mar 2019 00:00:00 -0500</pubDate>
        <link>https://moribellamy.github.io/2019-03-26-joycon-circuit/</link>
        <guid isPermaLink="true">https://moribellamy.github.io/2019-03-26-joycon-circuit/</guid>
      </item>
    
      <item>
        <title>Composing Context Managers in Python</title>
        <description>
          
          Letâ€™s say you have a custom context manager. Without loss of generality, consider: class MyGreeter(object): def __init__(self, name): self.name = name def __enter__(self): print(self.name, &apos;saying hello.&apos;) return len(self.name) def __exit__(self, exc_type, exc_val, exc_tb): print(self.name, &apos;saying goodbye.&apos;) return False with MyGreeter(&apos;Mori&apos;) as thing: print(thing) # Output: # Mori saying hello. #...
        </description>
        <pubDate>Fri, 14 Sep 2018 00:00:00 -0500</pubDate>
        <link>https://moribellamy.github.io/2018-09-14-composing-context-managers/</link>
        <guid isPermaLink="true">https://moribellamy.github.io/2018-09-14-composing-context-managers/</guid>
      </item>
    
  </channel>
</rss>
